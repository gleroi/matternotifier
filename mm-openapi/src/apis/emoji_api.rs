/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct EmojiApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> EmojiApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> EmojiApiClient<C> {
        EmojiApiClient {
            configuration,
        }
    }
}

pub trait EmojiApi {
    fn emoji_autocomplete_get(&self, name: &str) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>;
    fn emoji_emoji_id_delete(&self, emoji_id: &str) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>;
    fn emoji_emoji_id_get(&self, emoji_id: &str) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>;
    fn emoji_emoji_id_image_get(&self, emoji_id: &str) -> Box<dyn Future<Output = Result<(), Error<serde_json::Value>>>>;
    fn emoji_get(&self, page: Option<i32>, per_page: Option<i32>, sort: Option<&str>) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>;
    fn emoji_name_emoji_name_get(&self, emoji_name: &str) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>;
    fn emoji_post(&self, image: std::path::PathBuf, emoji: &str) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>;
    fn emoji_search_post(&self, inline_object64: crate::models::InlineObject64) -> Box<dyn Future<Output = Result<Vec<crate::models::Emoji>, Error<serde_json::Value>>>>;
}

impl<C: hyper::client::Connect>EmojiApi for EmojiApiClient<C> {
    fn emoji_autocomplete_get(&self, name: &str) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/emoji/autocomplete".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_query_param("name".to_string(), name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn emoji_emoji_id_delete(&self, emoji_id: &str) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/emoji/{emoji_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("emoji_id".to_string(), emoji_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn emoji_emoji_id_get(&self, emoji_id: &str) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/emoji/{emoji_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("emoji_id".to_string(), emoji_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn emoji_emoji_id_image_get(&self, emoji_id: &str) -> Box<dyn Future<Output = Result<(), Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/emoji/{emoji_id}/image".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("emoji_id".to_string(), emoji_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn emoji_get(&self, page: Option<i32>, per_page: Option<i32>, sort: Option<&str>) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/emoji".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = sort {
            req = req.with_query_param("sort".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn emoji_name_emoji_name_get(&self, emoji_name: &str) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/emoji/name/{emoji_name}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("emoji_name".to_string(), emoji_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn emoji_post(&self, image: std::path::PathBuf, emoji: &str) -> Box<dyn Future<Output = Result<crate::models::Emoji, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/emoji".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_form_param("image".to_string(), unimplemented!());
        req = req.with_form_param("emoji".to_string(), emoji.to_string());

        req.execute(self.configuration.borrow())
    }

    fn emoji_search_post(&self, inline_object64: crate::models::InlineObject64) -> Box<dyn Future<Output = Result<Vec<crate::models::Emoji>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/emoji/search".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object64);

        req.execute(self.configuration.borrow())
    }

}
