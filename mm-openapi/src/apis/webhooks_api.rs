/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct WebhooksApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> WebhooksApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> WebhooksApiClient<C> {
        WebhooksApiClient {
            configuration,
        }
    }
}

pub trait WebhooksApi {
    fn hooks_incoming_get(&self, page: Option<i32>, per_page: Option<i32>, team_id: Option<&str>) -> Box<dyn Future<Output = Result<Vec<crate::models::IncomingWebhook>, Error<serde_json::Value>>>>;
    fn hooks_incoming_hook_id_delete(&self, hook_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn hooks_incoming_hook_id_get(&self, hook_id: &str) -> Box<dyn Future<Output = Result<crate::models::IncomingWebhook, Error<serde_json::Value>>>>;
    fn hooks_incoming_hook_id_put(&self, hook_id: &str, inline_object66: crate::models::InlineObject66) -> Box<dyn Future<Output = Result<crate::models::IncomingWebhook, Error<serde_json::Value>>>>;
    fn hooks_incoming_post(&self, inline_object65: crate::models::InlineObject65) -> Box<dyn Future<Output = Result<crate::models::IncomingWebhook, Error<serde_json::Value>>>>;
    fn hooks_outgoing_get(&self, page: Option<i32>, per_page: Option<i32>, team_id: Option<&str>, channel_id: Option<&str>) -> Box<dyn Future<Output = Result<Vec<crate::models::OutgoingWebhook>, Error<serde_json::Value>>>>;
    fn hooks_outgoing_hook_id_delete(&self, hook_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn hooks_outgoing_hook_id_get(&self, hook_id: &str) -> Box<dyn Future<Output = Result<crate::models::OutgoingWebhook, Error<serde_json::Value>>>>;
    fn hooks_outgoing_hook_id_put(&self, hook_id: &str, inline_object68: crate::models::InlineObject68) -> Box<dyn Future<Output = Result<crate::models::OutgoingWebhook, Error<serde_json::Value>>>>;
    fn hooks_outgoing_hook_id_regen_token_post(&self, hook_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn hooks_outgoing_post(&self, inline_object67: crate::models::InlineObject67) -> Box<dyn Future<Output = Result<crate::models::OutgoingWebhook, Error<serde_json::Value>>>>;
}

impl<C: hyper::client::Connect>WebhooksApi for WebhooksApiClient<C> {
    fn hooks_incoming_get(&self, page: Option<i32>, per_page: Option<i32>, team_id: Option<&str>) -> Box<dyn Future<Output = Result<Vec<crate::models::IncomingWebhook>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/hooks/incoming".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = team_id {
            req = req.with_query_param("team_id".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn hooks_incoming_hook_id_delete(&self, hook_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/hooks/incoming/{hook_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("hook_id".to_string(), hook_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn hooks_incoming_hook_id_get(&self, hook_id: &str) -> Box<dyn Future<Output = Result<crate::models::IncomingWebhook, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/hooks/incoming/{hook_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("hook_id".to_string(), hook_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn hooks_incoming_hook_id_put(&self, hook_id: &str, inline_object66: crate::models::InlineObject66) -> Box<dyn Future<Output = Result<crate::models::IncomingWebhook, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/hooks/incoming/{hook_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("hook_id".to_string(), hook_id.to_string());
        req = req.with_body_param(inline_object66);

        req.execute(self.configuration.borrow())
    }

    fn hooks_incoming_post(&self, inline_object65: crate::models::InlineObject65) -> Box<dyn Future<Output = Result<crate::models::IncomingWebhook, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/hooks/incoming".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object65);

        req.execute(self.configuration.borrow())
    }

    fn hooks_outgoing_get(&self, page: Option<i32>, per_page: Option<i32>, team_id: Option<&str>, channel_id: Option<&str>) -> Box<dyn Future<Output = Result<Vec<crate::models::OutgoingWebhook>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/hooks/outgoing".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = team_id {
            req = req.with_query_param("team_id".to_string(), s.to_string());
        }
        if let Some(ref s) = channel_id {
            req = req.with_query_param("channel_id".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn hooks_outgoing_hook_id_delete(&self, hook_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/hooks/outgoing/{hook_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("hook_id".to_string(), hook_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn hooks_outgoing_hook_id_get(&self, hook_id: &str) -> Box<dyn Future<Output = Result<crate::models::OutgoingWebhook, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/hooks/outgoing/{hook_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("hook_id".to_string(), hook_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn hooks_outgoing_hook_id_put(&self, hook_id: &str, inline_object68: crate::models::InlineObject68) -> Box<dyn Future<Output = Result<crate::models::OutgoingWebhook, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/hooks/outgoing/{hook_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("hook_id".to_string(), hook_id.to_string());
        req = req.with_body_param(inline_object68);

        req.execute(self.configuration.borrow())
    }

    fn hooks_outgoing_hook_id_regen_token_post(&self, hook_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/hooks/outgoing/{hook_id}/regen_token".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("hook_id".to_string(), hook_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn hooks_outgoing_post(&self, inline_object67: crate::models::InlineObject67) -> Box<dyn Future<Output = Result<crate::models::OutgoingWebhook, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/hooks/outgoing".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object67);

        req.execute(self.configuration.borrow())
    }

}
