/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct SchemesApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SchemesApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SchemesApiClient<C> {
        SchemesApiClient {
            configuration,
        }
    }
}

pub trait SchemesApi {
    fn schemes_get(&self, scope: Option<&str>, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Output = Result<Vec<crate::models::Scheme>, Error<serde_json::Value>>>>;
    fn schemes_post(&self, inline_object85: crate::models::InlineObject85) -> Box<dyn Future<Output = Result<crate::models::Scheme, Error<serde_json::Value>>>>;
    fn schemes_scheme_id_channels_get(&self, scheme_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Output = Result<Vec<crate::models::Channel>, Error<serde_json::Value>>>>;
    fn schemes_scheme_id_delete(&self, scheme_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn schemes_scheme_id_get(&self, scheme_id: &str) -> Box<dyn Future<Output = Result<crate::models::Scheme, Error<serde_json::Value>>>>;
    fn schemes_scheme_id_patch_put(&self, scheme_id: &str, inline_object86: crate::models::InlineObject86) -> Box<dyn Future<Output = Result<crate::models::Scheme, Error<serde_json::Value>>>>;
    fn schemes_scheme_id_teams_get(&self, scheme_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Output = Result<Vec<crate::models::Team>, Error<serde_json::Value>>>>;
}

impl<C: hyper::client::Connect>SchemesApi for SchemesApiClient<C> {
    fn schemes_get(&self, scope: Option<&str>, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Output = Result<Vec<crate::models::Scheme>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/schemes".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = scope {
            req = req.with_query_param("scope".to_string(), s.to_string());
        }
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn schemes_post(&self, inline_object85: crate::models::InlineObject85) -> Box<dyn Future<Output = Result<crate::models::Scheme, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/schemes".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object85);

        req.execute(self.configuration.borrow())
    }

    fn schemes_scheme_id_channels_get(&self, scheme_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Output = Result<Vec<crate::models::Channel>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/schemes/{scheme_id}/channels".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        req = req.with_path_param("scheme_id".to_string(), scheme_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn schemes_scheme_id_delete(&self, scheme_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/schemes/{scheme_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("scheme_id".to_string(), scheme_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn schemes_scheme_id_get(&self, scheme_id: &str) -> Box<dyn Future<Output = Result<crate::models::Scheme, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/schemes/{scheme_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("scheme_id".to_string(), scheme_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn schemes_scheme_id_patch_put(&self, scheme_id: &str, inline_object86: crate::models::InlineObject86) -> Box<dyn Future<Output = Result<crate::models::Scheme, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/schemes/{scheme_id}/patch".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("scheme_id".to_string(), scheme_id.to_string());
        req = req.with_body_param(inline_object86);

        req.execute(self.configuration.borrow())
    }

    fn schemes_scheme_id_teams_get(&self, scheme_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Output = Result<Vec<crate::models::Team>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/schemes/{scheme_id}/teams".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        req = req.with_path_param("scheme_id".to_string(), scheme_id.to_string());

        req.execute(self.configuration.borrow())
    }

}
