/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct PluginsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> PluginsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> PluginsApiClient<C> {
        PluginsApiClient {
            configuration,
        }
    }
}

pub trait PluginsApi {
    fn plugins_get(&self, ) -> Box<dyn Future<Output = Result<crate::models::InlineResponse20014, Error<serde_json::Value>>>>;
    fn plugins_install_from_url_post(&self, plugin_download_url: &str, force: Option<&str>) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn plugins_marketplace_get(&self, page: Option<i32>, per_page: Option<i32>, filter: Option<&str>, server_version: Option<&str>, local_only: Option<bool>) -> Box<dyn Future<Output = Result<Vec<crate::models::MarketplacePlugin>, Error<serde_json::Value>>>>;
    fn plugins_marketplace_post(&self, inline_object83: crate::models::InlineObject83) -> Box<dyn Future<Output = Result<crate::models::PluginManifest, Error<serde_json::Value>>>>;
    fn plugins_plugin_id_delete(&self, plugin_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn plugins_plugin_id_disable_post(&self, plugin_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn plugins_plugin_id_enable_post(&self, plugin_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn plugins_post(&self, plugin: std::path::PathBuf, force: Option<&str>) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn plugins_statuses_get(&self, ) -> Box<dyn Future<Output = Result<Vec<crate::models::PluginStatus>, Error<serde_json::Value>>>>;
    fn plugins_webapp_get(&self, ) -> Box<dyn Future<Output = Result<Vec<crate::models::PluginManifestWebapp>, Error<serde_json::Value>>>>;
}

impl<C: hyper::client::Connect>PluginsApi for PluginsApiClient<C> {
    fn plugins_get(&self, ) -> Box<dyn Future<Output = Result<crate::models::InlineResponse20014, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/plugins".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn plugins_install_from_url_post(&self, plugin_download_url: &str, force: Option<&str>) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/plugins/install_from_url".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_query_param("plugin_download_url".to_string(), plugin_download_url.to_string());
        if let Some(ref s) = force {
            req = req.with_query_param("force".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn plugins_marketplace_get(&self, page: Option<i32>, per_page: Option<i32>, filter: Option<&str>, server_version: Option<&str>, local_only: Option<bool>) -> Box<dyn Future<Output = Result<Vec<crate::models::MarketplacePlugin>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/plugins/marketplace".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = filter {
            req = req.with_query_param("filter".to_string(), s.to_string());
        }
        if let Some(ref s) = server_version {
            req = req.with_query_param("server_version".to_string(), s.to_string());
        }
        if let Some(ref s) = local_only {
            req = req.with_query_param("local_only".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn plugins_marketplace_post(&self, inline_object83: crate::models::InlineObject83) -> Box<dyn Future<Output = Result<crate::models::PluginManifest, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/plugins/marketplace".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object83);

        req.execute(self.configuration.borrow())
    }

    fn plugins_plugin_id_delete(&self, plugin_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/plugins/{plugin_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("plugin_id".to_string(), plugin_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn plugins_plugin_id_disable_post(&self, plugin_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/plugins/{plugin_id}/disable".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("plugin_id".to_string(), plugin_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn plugins_plugin_id_enable_post(&self, plugin_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/plugins/{plugin_id}/enable".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("plugin_id".to_string(), plugin_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn plugins_post(&self, plugin: std::path::PathBuf, force: Option<&str>) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/plugins".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_form_param("plugin".to_string(), unimplemented!());
        if let Some(param_value) = force {
            req = req.with_form_param("force".to_string(), param_value.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn plugins_statuses_get(&self, ) -> Box<dyn Future<Output = Result<Vec<crate::models::PluginStatus>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/plugins/statuses".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn plugins_webapp_get(&self, ) -> Box<dyn Future<Output = Result<Vec<crate::models::PluginManifestWebapp>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/plugins/webapp".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

}
