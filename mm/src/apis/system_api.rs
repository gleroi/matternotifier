/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct SystemApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> SystemApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> SystemApiClient<C> {
        SystemApiClient {
            configuration,
        }
    }
}

pub trait SystemApi {
    fn analytics_old_get(&self, name: Option<&str>, team_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn audits_get(&self, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::Audit>, Error = Error<serde_json::Value>>>;
    fn caches_invalidate_post(&self, ) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn config_client_get(&self, format: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn config_environment_get(&self, ) -> Box<dyn Future<Item = crate::models::EnvironmentConfig, Error = Error<serde_json::Value>>>;
    fn config_get(&self, ) -> Box<dyn Future<Item = crate::models::Config, Error = Error<serde_json::Value>>>;
    fn config_patch_put(&self, config: crate::models::Config) -> Box<dyn Future<Item = crate::models::Config, Error = Error<serde_json::Value>>>;
    fn config_put(&self, config: crate::models::Config) -> Box<dyn Future<Item = crate::models::Config, Error = Error<serde_json::Value>>>;
    fn config_reload_post(&self, ) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn database_recycle_post(&self, ) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn email_test_post(&self, config: crate::models::Config) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn file_s3_test_post(&self, config: crate::models::Config) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn image_get(&self, ) -> Box<dyn Future<Item = std::path::PathBuf, Error = Error<serde_json::Value>>>;
    fn license_client_get(&self, format: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn license_delete(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn license_post(&self, license: std::path::PathBuf) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn logs_get(&self, page: Option<i32>, logs_per_page: Option<&str>) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn logs_post(&self, inline_object62: crate::models::InlineObject62) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn redirect_location_get(&self, url: &str) -> Box<dyn Future<Item = crate::models::InlineResponse20010, Error = Error<serde_json::Value>>>;
    fn server_busy_delete(&self, ) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn server_busy_get(&self, ) -> Box<dyn Future<Item = crate::models::ServerBusy, Error = Error<serde_json::Value>>>;
    fn server_busy_post(&self, seconds: Option<&str>) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn site_url_test_post(&self, inline_object59: crate::models::InlineObject59) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn system_ping_get(&self, ) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn system_timezones_get(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn trial_license_post(&self, inline_object61: crate::models::InlineObject61) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>SystemApi for SystemApiClient<C> {
    fn analytics_old_get(&self, name: Option<&str>, team_id: Option<&str>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/analytics/old".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = name {
            req = req.with_query_param("name".to_string(), s.to_string());
        }
        if let Some(ref s) = team_id {
            req = req.with_query_param("team_id".to_string(), s.to_string());
        }
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn audits_get(&self, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::Audit>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/audits".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn caches_invalidate_post(&self, ) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/caches/invalidate".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn config_client_get(&self, format: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/config/client".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_query_param("format".to_string(), format.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn config_environment_get(&self, ) -> Box<dyn Future<Item = crate::models::EnvironmentConfig, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/config/environment".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn config_get(&self, ) -> Box<dyn Future<Item = crate::models::Config, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/config".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn config_patch_put(&self, config: crate::models::Config) -> Box<dyn Future<Item = crate::models::Config, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/config/patch".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(config);

        req.execute(self.configuration.borrow())
    }

    fn config_put(&self, config: crate::models::Config) -> Box<dyn Future<Item = crate::models::Config, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/config".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(config);

        req.execute(self.configuration.borrow())
    }

    fn config_reload_post(&self, ) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/config/reload".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn database_recycle_post(&self, ) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/database/recycle".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn email_test_post(&self, config: crate::models::Config) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/email/test".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(config);

        req.execute(self.configuration.borrow())
    }

    fn file_s3_test_post(&self, config: crate::models::Config) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/file/s3_test".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(config);

        req.execute(self.configuration.borrow())
    }

    fn image_get(&self, ) -> Box<dyn Future<Item = std::path::PathBuf, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/image".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn license_client_get(&self, format: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/license/client".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_query_param("format".to_string(), format.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn license_delete(&self, ) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/license".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn license_post(&self, license: std::path::PathBuf) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/license".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_form_param("license".to_string(), unimplemented!());

        req.execute(self.configuration.borrow())
    }

    fn logs_get(&self, page: Option<i32>, logs_per_page: Option<&str>) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/logs".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = logs_per_page {
            req = req.with_query_param("logs_per_page".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn logs_post(&self, inline_object62: crate::models::InlineObject62) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/logs".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object62);

        req.execute(self.configuration.borrow())
    }

    fn redirect_location_get(&self, url: &str) -> Box<dyn Future<Item = crate::models::InlineResponse20010, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/redirect_location".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_query_param("url".to_string(), url.to_string());

        req.execute(self.configuration.borrow())
    }

    fn server_busy_delete(&self, ) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/server_busy".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn server_busy_get(&self, ) -> Box<dyn Future<Item = crate::models::ServerBusy, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/server_busy".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn server_busy_post(&self, seconds: Option<&str>) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/server_busy".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = seconds {
            req = req.with_query_param("seconds".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn site_url_test_post(&self, inline_object59: crate::models::InlineObject59) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/site_url/test".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object59);

        req.execute(self.configuration.borrow())
    }

    fn system_ping_get(&self, ) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/system/ping".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn system_timezones_get(&self, ) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/system/timezones".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn trial_license_post(&self, inline_object61: crate::models::InlineObject61) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/trial-license".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object61);
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

}
