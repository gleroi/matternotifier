/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ChannelsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ChannelsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ChannelsApiClient<C> {
        ChannelsApiClient {
            configuration,
        }
    }
}

pub trait ChannelsApi {
    fn channels_channel_id_convert_post(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_delete(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_get(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_member_counts_by_group_get(&self, channel_id: &str, include_timezones: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn channels_channel_id_members_get(&self, channel_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::ChannelMember>, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_members_ids_post(&self, channel_id: &str, request_body: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::ChannelMember>, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_members_minus_group_members_get(&self, channel_id: &str, group_ids: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn channels_channel_id_members_post(&self, channel_id: &str, inline_object47: crate::models::InlineObject47) -> Box<dyn Future<Item = crate::models::ChannelMember, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_members_user_id_delete(&self, channel_id: &str, user_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_members_user_id_get(&self, channel_id: &str, user_id: &str) -> Box<dyn Future<Item = crate::models::ChannelMember, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_members_user_id_notify_props_put(&self, channel_id: &str, user_id: &str, channel_notify_props: crate::models::ChannelNotifyProps) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_members_user_id_roles_put(&self, channel_id: &str, user_id: &str, inline_object48: crate::models::InlineObject48) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_members_user_id_scheme_roles_put(&self, channel_id: &str, user_id: &str, inline_object49: crate::models::InlineObject49) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_moderations_get(&self, channel_id: &str) -> Box<dyn Future<Item = Vec<crate::models::ChannelModeration>, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_moderations_patch_put(&self, channel_id: &str, channel_moderation_patch: crate::models::ChannelModerationPatch) -> Box<dyn Future<Item = Vec<crate::models::ChannelModeration>, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_move_post(&self, channel_id: &str, inline_object44: crate::models::InlineObject44) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_patch_put(&self, channel_id: &str, inline_object42: crate::models::InlineObject42) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_pinned_get(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::PostList, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_privacy_put(&self, channel_id: &str, inline_object43: crate::models::InlineObject43) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_put(&self, channel_id: &str, inline_object41: crate::models::InlineObject41) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_restore_post(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_scheme_put(&self, channel_id: &str, inline_object51: crate::models::InlineObject51) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_stats_get(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::ChannelStats, Error = Error<serde_json::Value>>>;
    fn channels_channel_id_timezones_get(&self, channel_id: &str) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>>;
    fn channels_direct_post(&self, request_body: Vec<String>) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn channels_get(&self, not_associated_to_group: Option<&str>, page: Option<i32>, per_page: Option<i32>, exclude_default_channels: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>>;
    fn channels_group_post(&self, request_body: Vec<String>) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn channels_group_search_post(&self, inline_object40: crate::models::InlineObject40) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>>;
    fn channels_members_user_id_view_post(&self, user_id: &str, inline_object50: crate::models::InlineObject50) -> Box<dyn Future<Item = crate::models::InlineResponse2008, Error = Error<serde_json::Value>>>;
    fn channels_post(&self, inline_object38: crate::models::InlineObject38) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn channels_search_post(&self, inline_object39: crate::models::InlineObject39) -> Box<dyn Future<Item = crate::models::InlineResponse2007, Error = Error<serde_json::Value>>>;
    fn teams_name_team_name_channels_name_channel_name_get(&self, team_name: &str, channel_name: &str, include_deleted: Option<bool>) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn teams_team_id_channels_autocomplete_get(&self, team_id: &str, name: &str) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>>;
    fn teams_team_id_channels_deleted_get(&self, team_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>>;
    fn teams_team_id_channels_get(&self, team_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>>;
    fn teams_team_id_channels_ids_post(&self, team_id: &str, request_body: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>>;
    fn teams_team_id_channels_name_channel_name_get(&self, team_id: &str, channel_name: &str, include_deleted: Option<bool>) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>>;
    fn teams_team_id_channels_search_archived_post(&self, team_id: &str, inline_object46: crate::models::InlineObject46) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>>;
    fn teams_team_id_channels_search_autocomplete_get(&self, team_id: &str, name: &str) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>>;
    fn teams_team_id_channels_search_post(&self, team_id: &str, inline_object45: crate::models::InlineObject45) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>>;
    fn users_user_id_channels_channel_id_unread_get(&self, user_id: &str, channel_id: &str) -> Box<dyn Future<Item = crate::models::ChannelUnread, Error = Error<serde_json::Value>>>;
    fn users_user_id_teams_team_id_channels_get(&self, user_id: &str, team_id: &str) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>>;
    fn users_user_id_teams_team_id_channels_members_get(&self, user_id: &str, team_id: &str) -> Box<dyn Future<Item = Vec<crate::models::ChannelMember>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>ChannelsApi for ChannelsApiClient<C> {
    fn channels_channel_id_convert_post(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/channels/{channel_id}/convert".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_delete(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/channels/{channel_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_get(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/channels/{channel_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_member_counts_by_group_get(&self, channel_id: &str, include_timezones: Option<bool>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/channels/{channel_id}/member_counts_by_group".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = include_timezones {
            req = req.with_query_param("include_timezones".to_string(), s.to_string());
        }
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_members_get(&self, channel_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::ChannelMember>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/channels/{channel_id}/members".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_members_ids_post(&self, channel_id: &str, request_body: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::ChannelMember>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/channels/{channel_id}/members/ids".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_members_minus_group_members_get(&self, channel_id: &str, group_ids: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/channels/{channel_id}/members_minus_group_members".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_query_param("group_ids".to_string(), group_ids.to_string());
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_members_post(&self, channel_id: &str, inline_object47: crate::models::InlineObject47) -> Box<dyn Future<Item = crate::models::ChannelMember, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/channels/{channel_id}/members".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_body_param(inline_object47);

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_members_user_id_delete(&self, channel_id: &str, user_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/channels/{channel_id}/members/{user_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_members_user_id_get(&self, channel_id: &str, user_id: &str) -> Box<dyn Future<Item = crate::models::ChannelMember, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/channels/{channel_id}/members/{user_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_members_user_id_notify_props_put(&self, channel_id: &str, user_id: &str, channel_notify_props: crate::models::ChannelNotifyProps) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/channels/{channel_id}/members/{user_id}/notify_props".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(channel_notify_props);

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_members_user_id_roles_put(&self, channel_id: &str, user_id: &str, inline_object48: crate::models::InlineObject48) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/channels/{channel_id}/members/{user_id}/roles".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(inline_object48);

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_members_user_id_scheme_roles_put(&self, channel_id: &str, user_id: &str, inline_object49: crate::models::InlineObject49) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/channels/{channel_id}/members/{user_id}/schemeRoles".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(inline_object49);

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_moderations_get(&self, channel_id: &str) -> Box<dyn Future<Item = Vec<crate::models::ChannelModeration>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/channels/{channel_id}/moderations".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_moderations_patch_put(&self, channel_id: &str, channel_moderation_patch: crate::models::ChannelModerationPatch) -> Box<dyn Future<Item = Vec<crate::models::ChannelModeration>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/channels/{channel_id}/moderations/patch".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_body_param(channel_moderation_patch);

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_move_post(&self, channel_id: &str, inline_object44: crate::models::InlineObject44) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/channels/{channel_id}/move".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_body_param(inline_object44);

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_patch_put(&self, channel_id: &str, inline_object42: crate::models::InlineObject42) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/channels/{channel_id}/patch".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_body_param(inline_object42);

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_pinned_get(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::PostList, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/channels/{channel_id}/pinned".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_privacy_put(&self, channel_id: &str, inline_object43: crate::models::InlineObject43) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/channels/{channel_id}/privacy".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_body_param(inline_object43);

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_put(&self, channel_id: &str, inline_object41: crate::models::InlineObject41) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/channels/{channel_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_body_param(inline_object41);

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_restore_post(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/channels/{channel_id}/restore".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_scheme_put(&self, channel_id: &str, inline_object51: crate::models::InlineObject51) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/channels/{channel_id}/scheme".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_body_param(inline_object51);

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_stats_get(&self, channel_id: &str) -> Box<dyn Future<Item = crate::models::ChannelStats, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/channels/{channel_id}/stats".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn channels_channel_id_timezones_get(&self, channel_id: &str) -> Box<dyn Future<Item = Vec<String>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/channels/{channel_id}/timezones".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn channels_direct_post(&self, request_body: Vec<String>) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/channels/direct".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn channels_get(&self, not_associated_to_group: Option<&str>, page: Option<i32>, per_page: Option<i32>, exclude_default_channels: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/channels".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = not_associated_to_group {
            req = req.with_query_param("not_associated_to_group".to_string(), s.to_string());
        }
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = exclude_default_channels {
            req = req.with_query_param("exclude_default_channels".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn channels_group_post(&self, request_body: Vec<String>) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/channels/group".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn channels_group_search_post(&self, inline_object40: crate::models::InlineObject40) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/channels/group/search".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object40);

        req.execute(self.configuration.borrow())
    }

    fn channels_members_user_id_view_post(&self, user_id: &str, inline_object50: crate::models::InlineObject50) -> Box<dyn Future<Item = crate::models::InlineResponse2008, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/channels/members/{user_id}/view".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_body_param(inline_object50);

        req.execute(self.configuration.borrow())
    }

    fn channels_post(&self, inline_object38: crate::models::InlineObject38) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/channels".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object38);

        req.execute(self.configuration.borrow())
    }

    fn channels_search_post(&self, inline_object39: crate::models::InlineObject39) -> Box<dyn Future<Item = crate::models::InlineResponse2007, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/channels/search".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object39);

        req.execute(self.configuration.borrow())
    }

    fn teams_name_team_name_channels_name_channel_name_get(&self, team_name: &str, channel_name: &str, include_deleted: Option<bool>) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/teams/name/{team_name}/channels/name/{channel_name}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = include_deleted {
            req = req.with_query_param("include_deleted".to_string(), s.to_string());
        }
        req = req.with_path_param("team_name".to_string(), team_name.to_string());
        req = req.with_path_param("channel_name".to_string(), channel_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn teams_team_id_channels_autocomplete_get(&self, team_id: &str, name: &str) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/teams/{team_id}/channels/autocomplete".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_query_param("name".to_string(), name.to_string());
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn teams_team_id_channels_deleted_get(&self, team_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/teams/{team_id}/channels/deleted".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn teams_team_id_channels_get(&self, team_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/teams/{team_id}/channels".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn teams_team_id_channels_ids_post(&self, team_id: &str, request_body: Vec<String>) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/teams/{team_id}/channels/ids".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("team_id".to_string(), team_id.to_string());
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn teams_team_id_channels_name_channel_name_get(&self, team_id: &str, channel_name: &str, include_deleted: Option<bool>) -> Box<dyn Future<Item = crate::models::Channel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/teams/{team_id}/channels/name/{channel_name}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = include_deleted {
            req = req.with_query_param("include_deleted".to_string(), s.to_string());
        }
        req = req.with_path_param("team_id".to_string(), team_id.to_string());
        req = req.with_path_param("channel_name".to_string(), channel_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn teams_team_id_channels_search_archived_post(&self, team_id: &str, inline_object46: crate::models::InlineObject46) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/teams/{team_id}/channels/search_archived".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("team_id".to_string(), team_id.to_string());
        req = req.with_body_param(inline_object46);

        req.execute(self.configuration.borrow())
    }

    fn teams_team_id_channels_search_autocomplete_get(&self, team_id: &str, name: &str) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/teams/{team_id}/channels/search_autocomplete".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_query_param("name".to_string(), name.to_string());
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn teams_team_id_channels_search_post(&self, team_id: &str, inline_object45: crate::models::InlineObject45) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/teams/{team_id}/channels/search".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("team_id".to_string(), team_id.to_string());
        req = req.with_body_param(inline_object45);

        req.execute(self.configuration.borrow())
    }

    fn users_user_id_channels_channel_id_unread_get(&self, user_id: &str, channel_id: &str) -> Box<dyn Future<Item = crate::models::ChannelUnread, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/users/{user_id}/channels/{channel_id}/unread".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn users_user_id_teams_team_id_channels_get(&self, user_id: &str, team_id: &str) -> Box<dyn Future<Item = Vec<crate::models::Channel>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/users/{user_id}/teams/{team_id}/channels".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn users_user_id_teams_team_id_channels_members_get(&self, user_id: &str, team_id: &str) -> Box<dyn Future<Item = Vec<crate::models::ChannelMember>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/users/{user_id}/teams/{team_id}/channels/members".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

}
