/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct RolesApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> RolesApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> RolesApiClient<C> {
        RolesApiClient {
            configuration,
        }
    }
}

pub trait RolesApi {
    fn roles_name_role_name_get(&self, role_name: &str) -> Box<dyn Future<Output = Result<crate::models::Role, Error<serde_json::Value>>>>;
    fn roles_names_post(&self, request_body: Vec<String>) -> Box<dyn Future<Output = Result<Vec<crate::models::Role>, Error<serde_json::Value>>>>;
    fn roles_role_id_get(&self, role_id: &str) -> Box<dyn Future<Output = Result<crate::models::Role, Error<serde_json::Value>>>>;
    fn roles_role_id_patch_put(&self, role_id: &str, inline_object84: crate::models::InlineObject84) -> Box<dyn Future<Output = Result<crate::models::Role, Error<serde_json::Value>>>>;
}

impl<C: hyper::client::Connect>RolesApi for RolesApiClient<C> {
    fn roles_name_role_name_get(&self, role_name: &str) -> Box<dyn Future<Output = Result<crate::models::Role, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/roles/name/{role_name}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("role_name".to_string(), role_name.to_string());

        req.execute(self.configuration.borrow())
    }

    fn roles_names_post(&self, request_body: Vec<String>) -> Box<dyn Future<Output = Result<Vec<crate::models::Role>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/roles/names".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(request_body);

        req.execute(self.configuration.borrow())
    }

    fn roles_role_id_get(&self, role_id: &str) -> Box<dyn Future<Output = Result<crate::models::Role, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/roles/{role_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("role_id".to_string(), role_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn roles_role_id_patch_put(&self, role_id: &str, inline_object84: crate::models::InlineObject84) -> Box<dyn Future<Output = Result<crate::models::Role, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/roles/{role_id}/patch".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("role_id".to_string(), role_id.to_string());
        req = req.with_body_param(inline_object84);

        req.execute(self.configuration.borrow())
    }

}
