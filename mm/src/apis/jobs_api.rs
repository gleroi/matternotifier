/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct JobsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> JobsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> JobsApiClient<C> {
        JobsApiClient {
            configuration,
        }
    }
}

pub trait JobsApi {
    fn jobs_get(&self, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Output = Result<Vec<crate::models::Job>, Error<serde_json::Value>>>>;
    fn jobs_job_id_cancel_post(&self, job_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn jobs_job_id_get(&self, job_id: &str) -> Box<dyn Future<Output = Result<crate::models::Job, Error<serde_json::Value>>>>;
    fn jobs_post(&self, inline_object58: crate::models::InlineObject58) -> Box<dyn Future<Output = Result<crate::models::Job, Error<serde_json::Value>>>>;
    fn jobs_type_type_get(&self, _type: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Output = Result<Vec<crate::models::Job>, Error<serde_json::Value>>>>;
}

impl<C: hyper::client::Connect>JobsApi for JobsApiClient<C> {
    fn jobs_get(&self, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Output = Result<Vec<crate::models::Job>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/jobs".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn jobs_job_id_cancel_post(&self, job_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/jobs/{job_id}/cancel".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("job_id".to_string(), job_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn jobs_job_id_get(&self, job_id: &str) -> Box<dyn Future<Output = Result<crate::models::Job, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/jobs/{job_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("job_id".to_string(), job_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn jobs_post(&self, inline_object58: crate::models::InlineObject58) -> Box<dyn Future<Output = Result<crate::models::Job, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/jobs".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object58);

        req.execute(self.configuration.borrow())
    }

    fn jobs_type_type_get(&self, _type: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Output = Result<Vec<crate::models::Job>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/jobs/type/{type}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        req = req.with_path_param("type".to_string(), _type.to_string());

        req.execute(self.configuration.borrow())
    }

}
