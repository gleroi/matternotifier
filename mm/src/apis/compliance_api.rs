/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct ComplianceApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> ComplianceApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> ComplianceApiClient<C> {
        ComplianceApiClient {
            configuration,
        }
    }
}

pub trait ComplianceApi {
    fn compliance_reports_get(&self, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::Compliance>, Error = Error<serde_json::Value>>>;
    fn compliance_reports_post(&self, ) -> Box<dyn Future<Item = crate::models::Compliance, Error = Error<serde_json::Value>>>;
    fn compliance_reports_report_id_download_get(&self, report_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn compliance_reports_report_id_get(&self, report_id: &str) -> Box<dyn Future<Item = crate::models::Compliance, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>ComplianceApi for ComplianceApiClient<C> {
    fn compliance_reports_get(&self, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::Compliance>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/compliance/reports".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn compliance_reports_post(&self, ) -> Box<dyn Future<Item = crate::models::Compliance, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/compliance/reports".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;

        req.execute(self.configuration.borrow())
    }

    fn compliance_reports_report_id_download_get(&self, report_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/compliance/reports/{report_id}/download".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("report_id".to_string(), report_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn compliance_reports_report_id_get(&self, report_id: &str) -> Box<dyn Future<Item = crate::models::Compliance, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/compliance/reports/{report_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("report_id".to_string(), report_id.to_string());

        req.execute(self.configuration.borrow())
    }

}
