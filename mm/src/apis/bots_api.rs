/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct BotsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> BotsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> BotsApiClient<C> {
        BotsApiClient {
            configuration,
        }
    }
}

pub trait BotsApi {
    fn bots_bot_user_id_assign_user_id_post(&self, bot_user_id: &str, user_id: &str) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>>;
    fn bots_bot_user_id_convert_to_user_post(&self, bot_user_id: &str, inline_object93: crate::models::InlineObject93, set_system_admin: Option<bool>) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn bots_bot_user_id_disable_post(&self, bot_user_id: &str) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>>;
    fn bots_bot_user_id_enable_post(&self, bot_user_id: &str) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>>;
    fn bots_bot_user_id_get(&self, bot_user_id: &str, include_deleted: Option<bool>) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>>;
    fn bots_bot_user_id_icon_delete(&self, bot_user_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn bots_bot_user_id_icon_get(&self, bot_user_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>>;
    fn bots_bot_user_id_icon_post(&self, bot_user_id: &str, image: std::path::PathBuf) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn bots_bot_user_id_put(&self, bot_user_id: &str, inline_object91: crate::models::InlineObject91) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>>;
    fn bots_get(&self, page: Option<i32>, per_page: Option<i32>, include_deleted: Option<bool>, only_orphaned: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::Bot>, Error = Error<serde_json::Value>>>;
    fn bots_post(&self, inline_object90: crate::models::InlineObject90) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>>;
    fn users_user_id_convert_to_bot_post(&self, user_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>BotsApi for BotsApiClient<C> {
    fn bots_bot_user_id_assign_user_id_post(&self, bot_user_id: &str, user_id: &str) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/bots/{bot_user_id}/assign/{user_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("bot_user_id".to_string(), bot_user_id.to_string());
        req = req.with_path_param("user_id".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn bots_bot_user_id_convert_to_user_post(&self, bot_user_id: &str, inline_object93: crate::models::InlineObject93, set_system_admin: Option<bool>) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/bots/{bot_user_id}/convert_to_user".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = set_system_admin {
            req = req.with_query_param("set_system_admin".to_string(), s.to_string());
        }
        req = req.with_path_param("bot_user_id".to_string(), bot_user_id.to_string());
        req = req.with_body_param(inline_object93);

        req.execute(self.configuration.borrow())
    }

    fn bots_bot_user_id_disable_post(&self, bot_user_id: &str) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/bots/{bot_user_id}/disable".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("bot_user_id".to_string(), bot_user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn bots_bot_user_id_enable_post(&self, bot_user_id: &str) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/bots/{bot_user_id}/enable".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("bot_user_id".to_string(), bot_user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn bots_bot_user_id_get(&self, bot_user_id: &str, include_deleted: Option<bool>) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/bots/{bot_user_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = include_deleted {
            req = req.with_query_param("include_deleted".to_string(), s.to_string());
        }
        req = req.with_path_param("bot_user_id".to_string(), bot_user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn bots_bot_user_id_icon_delete(&self, bot_user_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/bots/{bot_user_id}/icon".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("bot_user_id".to_string(), bot_user_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn bots_bot_user_id_icon_get(&self, bot_user_id: &str) -> Box<dyn Future<Item = (), Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/bots/{bot_user_id}/icon".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("bot_user_id".to_string(), bot_user_id.to_string());
        req = req.returns_nothing();

        req.execute(self.configuration.borrow())
    }

    fn bots_bot_user_id_icon_post(&self, bot_user_id: &str, image: std::path::PathBuf) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/bots/{bot_user_id}/icon".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("bot_user_id".to_string(), bot_user_id.to_string());
        req = req.with_form_param("image".to_string(), unimplemented!());

        req.execute(self.configuration.borrow())
    }

    fn bots_bot_user_id_put(&self, bot_user_id: &str, inline_object91: crate::models::InlineObject91) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/bots/{bot_user_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("bot_user_id".to_string(), bot_user_id.to_string());
        req = req.with_body_param(inline_object91);

        req.execute(self.configuration.borrow())
    }

    fn bots_get(&self, page: Option<i32>, per_page: Option<i32>, include_deleted: Option<bool>, only_orphaned: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::Bot>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/bots".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = include_deleted {
            req = req.with_query_param("include_deleted".to_string(), s.to_string());
        }
        if let Some(ref s) = only_orphaned {
            req = req.with_query_param("only_orphaned".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn bots_post(&self, inline_object90: crate::models::InlineObject90) -> Box<dyn Future<Item = crate::models::Bot, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/bots".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object90);

        req.execute(self.configuration.borrow())
    }

    fn users_user_id_convert_to_bot_post(&self, user_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/users/{user_id}/convert_to_bot".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

}
