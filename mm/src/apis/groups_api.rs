/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct GroupsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> GroupsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> GroupsApiClient<C> {
        GroupsApiClient {
            configuration,
        }
    }
}

pub trait GroupsApi {
    fn channels_channel_id_groups_get(&self, channel_id: &str, page: Option<i32>, per_page: Option<i32>, filter_allow_reference: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::Group>, Error = Error<serde_json::Value>>>;
    fn groups_get(&self, not_associated_to_team: &str, not_associated_to_channel: &str, page: Option<i32>, per_page: Option<i32>, q: Option<&str>, include_member_count: Option<bool>, since: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::Group>, Error = Error<serde_json::Value>>>;
    fn groups_group_id_channels_channel_id_get(&self, group_id: &str, channel_id: &str) -> Box<dyn Future<Item = crate::models::GroupSyncableChannel, Error = Error<serde_json::Value>>>;
    fn groups_group_id_channels_channel_id_link_delete(&self, group_id: &str, channel_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn groups_group_id_channels_channel_id_link_post(&self, group_id: &str, channel_id: &str) -> Box<dyn Future<Item = crate::models::GroupSyncableChannel, Error = Error<serde_json::Value>>>;
    fn groups_group_id_channels_channel_id_patch_put(&self, group_id: &str, channel_id: &str, inline_object75: crate::models::InlineObject75) -> Box<dyn Future<Item = crate::models::GroupSyncableChannel, Error = Error<serde_json::Value>>>;
    fn groups_group_id_channels_get(&self, group_id: &str) -> Box<dyn Future<Item = Vec<crate::models::GroupSyncableChannels>, Error = Error<serde_json::Value>>>;
    fn groups_group_id_get(&self, group_id: &str) -> Box<dyn Future<Item = crate::models::Group, Error = Error<serde_json::Value>>>;
    fn groups_group_id_members_get(&self, group_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = crate::models::InlineResponse20011, Error = Error<serde_json::Value>>>;
    fn groups_group_id_patch_put(&self, group_id: &str, inline_object73: crate::models::InlineObject73) -> Box<dyn Future<Item = crate::models::Group, Error = Error<serde_json::Value>>>;
    fn groups_group_id_stats_get(&self, group_id: &str) -> Box<dyn Future<Item = crate::models::InlineResponse20012, Error = Error<serde_json::Value>>>;
    fn groups_group_id_teams_get(&self, group_id: &str) -> Box<dyn Future<Item = Vec<crate::models::GroupSyncableTeams>, Error = Error<serde_json::Value>>>;
    fn groups_group_id_teams_team_id_get(&self, group_id: &str, team_id: &str) -> Box<dyn Future<Item = crate::models::GroupSyncableTeam, Error = Error<serde_json::Value>>>;
    fn groups_group_id_teams_team_id_link_delete(&self, group_id: &str, team_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn groups_group_id_teams_team_id_link_post(&self, group_id: &str, team_id: &str) -> Box<dyn Future<Item = crate::models::GroupSyncableTeam, Error = Error<serde_json::Value>>>;
    fn groups_group_id_teams_team_id_patch_put(&self, group_id: &str, team_id: &str, inline_object74: crate::models::InlineObject74) -> Box<dyn Future<Item = crate::models::GroupSyncableTeam, Error = Error<serde_json::Value>>>;
    fn ldap_groups_remote_id_link_delete(&self, remote_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>>;
    fn teams_team_id_groups_get(&self, team_id: &str, page: Option<i32>, per_page: Option<i32>, filter_allow_reference: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::Group>, Error = Error<serde_json::Value>>>;
    fn users_user_id_groups_get(&self, user_id: &str) -> Box<dyn Future<Item = Vec<crate::models::Group>, Error = Error<serde_json::Value>>>;
}

impl<C: hyper::client::Connect>GroupsApi for GroupsApiClient<C> {
    fn channels_channel_id_groups_get(&self, channel_id: &str, page: Option<i32>, per_page: Option<i32>, filter_allow_reference: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::Group>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/channels/{channel_id}/groups".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = filter_allow_reference {
            req = req.with_query_param("filter_allow_reference".to_string(), s.to_string());
        }
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_get(&self, not_associated_to_team: &str, not_associated_to_channel: &str, page: Option<i32>, per_page: Option<i32>, q: Option<&str>, include_member_count: Option<bool>, since: Option<i32>) -> Box<dyn Future<Item = Vec<crate::models::Group>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/groups".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = q {
            req = req.with_query_param("q".to_string(), s.to_string());
        }
        if let Some(ref s) = include_member_count {
            req = req.with_query_param("include_member_count".to_string(), s.to_string());
        }
        req = req.with_query_param("not_associated_to_team".to_string(), not_associated_to_team.to_string());
        req = req.with_query_param("not_associated_to_channel".to_string(), not_associated_to_channel.to_string());
        if let Some(ref s) = since {
            req = req.with_query_param("since".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_channels_channel_id_get(&self, group_id: &str, channel_id: &str) -> Box<dyn Future<Item = crate::models::GroupSyncableChannel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/groups/{group_id}/channels/{channel_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_channels_channel_id_link_delete(&self, group_id: &str, channel_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/groups/{group_id}/channels/{channel_id}/link".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_channels_channel_id_link_post(&self, group_id: &str, channel_id: &str) -> Box<dyn Future<Item = crate::models::GroupSyncableChannel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/groups/{group_id}/channels/{channel_id}/link".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_channels_channel_id_patch_put(&self, group_id: &str, channel_id: &str, inline_object75: crate::models::InlineObject75) -> Box<dyn Future<Item = crate::models::GroupSyncableChannel, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/groups/{group_id}/channels/{channel_id}/patch".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());
        req = req.with_path_param("channel_id".to_string(), channel_id.to_string());
        req = req.with_body_param(inline_object75);

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_channels_get(&self, group_id: &str) -> Box<dyn Future<Item = Vec<crate::models::GroupSyncableChannels>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/groups/{group_id}/channels".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_get(&self, group_id: &str) -> Box<dyn Future<Item = crate::models::Group, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/groups/{group_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_members_get(&self, group_id: &str, page: Option<i32>, per_page: Option<i32>) -> Box<dyn Future<Item = crate::models::InlineResponse20011, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/groups/{group_id}/members".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        req = req.with_path_param("group_id".to_string(), group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_patch_put(&self, group_id: &str, inline_object73: crate::models::InlineObject73) -> Box<dyn Future<Item = crate::models::Group, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/groups/{group_id}/patch".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());
        req = req.with_body_param(inline_object73);

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_stats_get(&self, group_id: &str) -> Box<dyn Future<Item = crate::models::InlineResponse20012, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/groups/{group_id}/stats".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_teams_get(&self, group_id: &str) -> Box<dyn Future<Item = Vec<crate::models::GroupSyncableTeams>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/groups/{group_id}/teams".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_teams_team_id_get(&self, group_id: &str, team_id: &str) -> Box<dyn Future<Item = crate::models::GroupSyncableTeam, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/groups/{group_id}/teams/{team_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_teams_team_id_link_delete(&self, group_id: &str, team_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/groups/{group_id}/teams/{team_id}/link".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_teams_team_id_link_post(&self, group_id: &str, team_id: &str) -> Box<dyn Future<Item = crate::models::GroupSyncableTeam, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/groups/{group_id}/teams/{team_id}/link".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn groups_group_id_teams_team_id_patch_put(&self, group_id: &str, team_id: &str, inline_object74: crate::models::InlineObject74) -> Box<dyn Future<Item = crate::models::GroupSyncableTeam, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/groups/{group_id}/teams/{team_id}/patch".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("group_id".to_string(), group_id.to_string());
        req = req.with_path_param("team_id".to_string(), team_id.to_string());
        req = req.with_body_param(inline_object74);

        req.execute(self.configuration.borrow())
    }

    fn ldap_groups_remote_id_link_delete(&self, remote_id: &str) -> Box<dyn Future<Item = crate::models::StatusOk, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/ldap/groups/{remote_id}/link".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("remote_id".to_string(), remote_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn teams_team_id_groups_get(&self, team_id: &str, page: Option<i32>, per_page: Option<i32>, filter_allow_reference: Option<bool>) -> Box<dyn Future<Item = Vec<crate::models::Group>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/teams/{team_id}/groups".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = page {
            req = req.with_query_param("page".to_string(), s.to_string());
        }
        if let Some(ref s) = per_page {
            req = req.with_query_param("per_page".to_string(), s.to_string());
        }
        if let Some(ref s) = filter_allow_reference {
            req = req.with_query_param("filter_allow_reference".to_string(), s.to_string());
        }
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn users_user_id_groups_get(&self, user_id: &str) -> Box<dyn Future<Item = Vec<crate::models::Group>, Error = Error<serde_json::Value>>> {
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/users/{user_id}/groups".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("user_id".to_string(), user_id.to_string());

        req.execute(self.configuration.borrow())
    }

}
