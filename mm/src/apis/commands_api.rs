/*
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://openapi-generator.tech
 */

use std::rc::Rc;
use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use serde_json;
use futures::Future;

use super::{Error, configuration};
use super::request as __internal_request;

pub struct CommandsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> CommandsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> CommandsApiClient<C> {
        CommandsApiClient {
            configuration,
        }
    }
}

pub trait CommandsApi {
    fn commands_command_id_delete(&self, command_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn commands_command_id_get(&self, command_id: &str) -> Box<dyn Future<Output = Result<crate::models::Command, Error<serde_json::Value>>>>;
    fn commands_command_id_move_put(&self, command_id: &str, inline_object78: crate::models::InlineObject78) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>;
    fn commands_command_id_put(&self, command_id: &str, command: crate::models::Command) -> Box<dyn Future<Output = Result<crate::models::Command, Error<serde_json::Value>>>>;
    fn commands_command_id_regen_token_put(&self, command_id: &str) -> Box<dyn Future<Output = Result<crate::models::InlineResponse20013, Error<serde_json::Value>>>>;
    fn commands_execute_post(&self, inline_object79: crate::models::InlineObject79) -> Box<dyn Future<Output = Result<crate::models::CommandResponse, Error<serde_json::Value>>>>;
    fn commands_get(&self, team_id: Option<&str>, custom_only: Option<bool>) -> Box<dyn Future<Output = Result<Vec<crate::models::Command>, Error<serde_json::Value>>>>;
    fn commands_post(&self, inline_object77: crate::models::InlineObject77) -> Box<dyn Future<Output = Result<crate::models::Command, Error<serde_json::Value>>>>;
    fn teams_team_id_commands_autocomplete_get(&self, team_id: &str) -> Box<dyn Future<Output = Result<Vec<crate::models::Command>, Error<serde_json::Value>>>>;
    fn teams_team_id_commands_autocomplete_suggestions_get(&self, team_id: &str, user_input: &str) -> Box<dyn Future<Output = Result<Vec<crate::models::AutocompleteSuggestion>, Error<serde_json::Value>>>>;
}

impl<C: hyper::client::Connect>CommandsApi for CommandsApiClient<C> {
    fn commands_command_id_delete(&self, command_id: &str) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Delete, "/commands/{command_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("command_id".to_string(), command_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn commands_command_id_get(&self, command_id: &str) -> Box<dyn Future<Output = Result<crate::models::Command, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/commands/{command_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("command_id".to_string(), command_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn commands_command_id_move_put(&self, command_id: &str, inline_object78: crate::models::InlineObject78) -> Box<dyn Future<Output = Result<crate::models::StatusOk, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/commands/{command_id}/move".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("command_id".to_string(), command_id.to_string());
        req = req.with_body_param(inline_object78);

        req.execute(self.configuration.borrow())
    }

    fn commands_command_id_put(&self, command_id: &str, command: crate::models::Command) -> Box<dyn Future<Output = Result<crate::models::Command, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/commands/{command_id}".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("command_id".to_string(), command_id.to_string());
        req = req.with_body_param(command);

        req.execute(self.configuration.borrow())
    }

    fn commands_command_id_regen_token_put(&self, command_id: &str) -> Box<dyn Future<Output = Result<crate::models::InlineResponse20013, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Put, "/commands/{command_id}/regen_token".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("command_id".to_string(), command_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn commands_execute_post(&self, inline_object79: crate::models::InlineObject79) -> Box<dyn Future<Output = Result<crate::models::CommandResponse, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/commands/execute".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object79);

        req.execute(self.configuration.borrow())
    }

    fn commands_get(&self, team_id: Option<&str>, custom_only: Option<bool>) -> Box<dyn Future<Output = Result<Vec<crate::models::Command>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/commands".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        if let Some(ref s) = team_id {
            req = req.with_query_param("team_id".to_string(), s.to_string());
        }
        if let Some(ref s) = custom_only {
            req = req.with_query_param("custom_only".to_string(), s.to_string());
        }

        req.execute(self.configuration.borrow())
    }

    fn commands_post(&self, inline_object77: crate::models::InlineObject77) -> Box<dyn Future<Output = Result<crate::models::Command, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Post, "/commands".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_body_param(inline_object77);

        req.execute(self.configuration.borrow())
    }

    fn teams_team_id_commands_autocomplete_get(&self, team_id: &str) -> Box<dyn Future<Output = Result<Vec<crate::models::Command>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/teams/{team_id}/commands/autocomplete".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

    fn teams_team_id_commands_autocomplete_suggestions_get(&self, team_id: &str, user_input: &str) -> Box<dyn Future<Output = Result<Vec<crate::models::AutocompleteSuggestion>, Error<serde_json::Value>>>>{
        let mut req = __internal_request::Request::new(hyper::Method::Get, "/teams/{team_id}/commands/autocomplete_suggestions".to_string())
            .with_auth(__internal_request::Auth::Basic)
        ;
        req = req.with_query_param("user_input".to_string(), user_input.to_string());
        req = req.with_path_param("team_id".to_string(), team_id.to_string());

        req.execute(self.configuration.borrow())
    }

}
